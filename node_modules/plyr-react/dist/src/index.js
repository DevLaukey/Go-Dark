'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var React = require('react');
var PlyrJS = require('plyr');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var React__default = /*#__PURE__*/_interopDefaultLegacy(React);
var PlyrJS__default = /*#__PURE__*/_interopDefaultLegacy(PlyrJS);

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

function _objectWithoutProperties(source, excluded) {
  if (source == null) return {};

  var target = _objectWithoutPropertiesLoose(source, excluded);

  var key, i;

  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }

  return target;
}

var Plyr = /*#__PURE__*/React__default['default'].forwardRef(function (props, ref) {
  var _props$options = props.options,
      options = _props$options === void 0 ? null : _props$options,
      source = props.source,
      rest = _objectWithoutProperties(props, ["options", "source"]);

  var innerRef = React.useRef();
  React.useEffect(function () {
    var _innerRef$current;

    if (!innerRef.current) return;

    if (!((_innerRef$current = innerRef.current) !== null && _innerRef$current !== void 0 && _innerRef$current.plyr)) {
      innerRef.current.plyr = new PlyrJS__default['default']('.plyr-react', options !== null && options !== void 0 ? options : {});
    }

    if (typeof ref === 'function') {
      if (innerRef.current) ref(innerRef.current);
    } else {
      if (ref && innerRef.current) ref.current = innerRef.current;
    }

    if (innerRef.current && source) {
      innerRef.current.plyr.source = source;
    }
  }, [ref, options, source]);
  return /*#__PURE__*/React__default['default'].createElement("video", _extends({
    ref: innerRef,
    className: "plyr-react plyr"
  }, rest));
});
Plyr.displayName = 'Plyr';
Plyr.defaultProps = {
  options: {
    controls: ['rewind', 'play', 'fast-forward', 'progress', 'current-time', 'duration', 'mute', 'volume', 'settings', 'fullscreen'],
    i18n: {
      restart: 'Restart',
      rewind: 'Rewind {seektime}s',
      play: 'Play',
      pause: 'Pause',
      fastForward: 'Forward {seektime}s',
      seek: 'Seek',
      seekLabel: '{currentTime} of {duration}',
      played: 'Played',
      buffered: 'Buffered',
      currentTime: 'Current time',
      duration: 'Duration',
      volume: 'Volume',
      mute: 'Mute',
      unmute: 'Unmute',
      enableCaptions: 'Enable captions',
      disableCaptions: 'Disable captions',
      download: 'Download',
      enterFullscreen: 'Enter fullscreen',
      exitFullscreen: 'Exit fullscreen',
      frameTitle: 'Player for {title}',
      captions: 'Captions',
      settings: 'Settings',
      menuBack: 'Go back to previous menu',
      speed: 'Speed',
      normal: 'Normal',
      quality: 'Quality',
      loop: 'Loop'
    }
  },
  source: {
    type: 'video',
    sources: [{
      src: 'https://cdn.plyr.io/static/blank.mp4',
      type: 'video/mp4',
      size: 720
    }, {
      src: 'https://cdn.plyr.io/static/blank.mp4',
      type: 'video/mp4',
      size: 1080
    }]
  }
};

exports.Plyr = Plyr;
exports.default = Plyr;
